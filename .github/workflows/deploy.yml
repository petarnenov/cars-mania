name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/backend
            ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: |
            # Navigate to project directory
            cd /opt/cars-mania
            
            # Pull latest images
            docker compose -f docker-compose.prod.yml pull
            
            # Stop existing containers
            docker compose -f docker-compose.prod.yml down
            
            # Start with new images
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            echo "Waiting for services to be ready..."
            sleep 30
            
            # Check service health
            docker compose -f docker-compose.prod.yml ps
            
            # Clean up old images
            docker image prune -f
            
            echo "Deployment completed successfully!"

      - name: Health check
        run: |
          # Wait a bit more for services to fully start
          sleep 60
          
          # Check if services are responding
          curl -f http://${{ secrets.PROD_HOST }}/api/health || exit 1
          curl -f http://${{ secrets.PROD_HOST }}/ || exit 1
          
          echo "Health checks passed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment completed successfully!"
          echo "üåê Frontend: http://${{ secrets.PROD_HOST }}"
          echo "üîß Backend: http://${{ secrets.PROD_HOST }}/api"
          echo "üìä Health: http://${{ secrets.PROD_HOST }}/api/health"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Check the logs for more details."
